GOALS
Completely refactor code (scipy, or maybe tensorflow. Move away from java development) with a focus on optimization (numpy, pandas?),
readability, and ease of use. Basically, the goal is to simplify it by building it off of the simpler scikit-learn API.
Add testing

COMPLETED
Made notes about classes (and some individual functions) for what needs to be, could be, or should be refactored

TODO
Look into scikit-learn functionality (to see if refactoring is feasible) based on comments
Optimize the base code (startFish, scrape, saveFish) before working on any analyzers (it makes sense to go in inheritance
order: startFish, scrape, saveFish).
Attempt to refactor the SaveFish class
If it works, adapt the StartFish class accordingly
Look into general optimizations (especially with my non-optimizer classes; those are the heart of the library)
Look into preallocation based on the number of urls (for optimization's sake; numpy sucks at appending but is great at pre-initialization)
Break out the analyzer functionality and try to make them as standalone as possible (maybe I could add a function decorator instead of required naming?)
I'm adding a lot of debugging notes (I'll get rid of the ## once I'm done)
I also want to increase readability (for example, by replacing a lot of the messy code with CONST vars)

CHECKLIST (base methods)
✅StartFish: Grouped code a little more (added some methods, increased readability; not getting rid of large portions of code yet,
because so much still needs to be done)
✅Analyzer: Added @overrides method and raise
NotImplementedErrors so it's readily apparent that the methods need to be overriden
Scrape: Upgraded from sqlite3 to PostgreSQL (maybe allows me to get rid of shorteners?
That might help for optimization (urls should never exceed 2048 characters)). I also want to optimize naming conventions
(files, database urls, ect). I'm going to have to be careful, because I am getting rid of a decent amount of functionality
(hopefully it can easily be optimized tho)
SaveFish

CHECKLIST (analyzer methods)
ImageAnalyzer:
PageAnalyzer:

RESOURCES
https://scikit-learn.org/
https://pandas.pydata.org/docs/user_guide/10min.html
https://numpy.org/doc/1.20/docs/howto_document.html


NOTES
Background: https://scikit-learn.org/stable/tutorial/basic/tutorial.html
FEATURE SELECTION (https://scikit-learn.org/stable/modules/feature_selection.html)


SAMPLING (https://machinelearningmastery.com/random-oversampling-and-undersampling-for-imbalanced-classification/) + PREPROCESSING



DATASETS (https://scikit-learn.org/stable/datasets/sample_generators.html)


CLASSIFICATION + REGRESSION
I'm pigeon-holing a lot of the settings; I want to incorporate my API with scikit-learns to allow for as MUCH dynamism as possible.

It seems like all of this is possible with scikit-learn; now I want to figure out a better way to handle Selenium errors
I think perhaps instead of handling Selenium errors, what if I only accepted websites w/ ACTIVE return values?
(an active return value is defined here: https://github.com/mitchellkrogza/Phishing.Database)

BREAKING DOWN INDIVIDUAL CLASSES

SCRAPE CLASS
__init__: I still need to review and make changes according to changes to class attributes
preallocate: TODO
✅closeSelenium
✅initializeBS
addAnalyzer: I think this is good, but again, I need to figure out what kind of changes I'm making,
and adapt accordingly (I'm probably going to need to analyze the saveFish class as well)
shorten: removed
expand: removed
generateFilename: removed (all of those added complexity that I'm determined to do without)
siteValidation: Again, I think it's complete, but no way to tell without debugging
✅saveScreenshot
✅getTime
exitHandler: Need to review my overall plan to determine whether I want to use the exitHandler or not
resume: Definitely needs rethinking; this function is the product of a lot of my decisions, and it
feels messy and inefficient
✅checkInternet: Might want to remove this? Not sure yet
goFish: Similar to resume, this function is the most important one in the scrape class,
so I need to look into refactoring and optimizing as much as possible here

SAVEFISH CLASS
__init__:
FS:
generateInstances: I'll probably refactor this to handle ALL sampling cases
closePWW3: refactor to remove PWW3 functionality
attributeCreation: 
