GOALS
Completely refactor code (scipy, or maybe tensorflow. Move away from java development) with a focus on optimization (numpy, pandas?),
readability, and ease of use. Basically, the goal is to simplify it by building it off of the simpler scikit-learn API.
Add testing

COMPLETED
Made notes about classes (and some individual functions) for what needs to be, could be, or should be refactored

TODO
Look into scikit-learn functionality (to see if refactoring is feasible) based on comments
Optimize the base code (startFish, scrape, saveFish) before working on any analyzers (it makes sense to go in inheritance
order: startFish, scrape, saveFish).
Attempt to refactor the SaveFish class
If it works, adapt the StartFish class accordingly
Look into general optimizations (especially with my non-optimizer classes; those are the heart of the library)
Look into preallocation based on the number of urls (for optimization's sake; numpy sucks at appending but is great at pre-initialization)
Break out the analyzer functionality and try to make them as standalone as possible (maybe I could add a function decorator instead of required naming?)
I'm adding a lot of debugging notes (I'll get rid of the ## once I'm done)
I also want to increase readability (for example, by replacing a lot of the messy code with CONST vars)

CHECKLIST (base methods)
✅StartFish: 
✅Analyzer: Added @overrides method and raise
NotImplementedErrors so it's readily apparent that the methods need to be overriden
Scrape: Upgrading from sqlite3 to PostgreSQL
SaveFish

CHECKLIST (analyzer methods)
ImageAnalyzer:
PageAnalyzer:

RESOURCES
https://scikit-learn.org/
https://pandas.pydata.org/docs/user_guide/10min.html
https://numpy.org/doc/1.20/docs/howto_document.html


NOTES
Background: https://scikit-learn.org/stable/tutorial/basic/tutorial.html
FEATURE SELECTION (https://scikit-learn.org/stable/modules/feature_selection.html)


SAMPLING (https://machinelearningmastery.com/random-oversampling-and-undersampling-for-imbalanced-classification/) + PREPROCESSING



DATASETS (https://scikit-learn.org/stable/datasets/sample_generators.html)


CLASSIFICATION + REGRESSION
I'm pigeon-holing a lot of the settings; I want to incorporate my API with scikit-learns to allow for as MUCH dynamism as possible.

It seems like all of this is possible with scikit-learn; now I want to figure out a better way to handle Selenium errors
I think perhaps instead of handling Selenium errors, what if I only accepted websites w/ ACTIVE return values?
(an active return value is defined here: https://github.com/mitchellkrogza/Phishing.Database)