# Comparing attributes from ranker Feature Selection methods (image-based)

def main():
    # 1061 Features Total
    # Top 10 from each filter method
    # Pyramid (1-756)
    # Color Layout (757-789)
    # Edge histogram (790-869)
    # FCTH  (870-1061)
    correlational = [2,35,1,110,143,109,38,3,37,111,398,362,5,431,71,397,179,146,113,542,361,32,363,10,73,39,74,145,33,467,506,112,399,107,149,395,147,140,141,142,541,575,4,34,41,539,6,325,435,505,611,114,326,365,9,401,545,433,153,182,42,581,400,254,543,509,434,68,402,369,69,437,579,469,287,253,507,46,470,117,366,181,257,217,513,359,323,148,577,364,549,429,40,82,293,578,441,544,580,647,77,503,289,585,218,613,221,45,466,251,261,136,430,510,405,465,178,176,610,508,436,404,290,327,70,919,593,418,423,17,75,322,403,609,392,256,546,428,328,464,449,719,291,220,286,183,689,225,76,943,370,222,292,356,686,78,394,305,177,367,248,321,297,844,320,629,219,118,255,186,185,104,650,249,393,154,115,649,357,106,258,424,43,212,184,574,521,438,150,409,172,284,478,536,330,28,89,855,116,573,693,473,135,614,105,406,215,511,653,460,685,474,843,190,837,224,412,514,368,53,445,334,568,285,44,472,572,532,824,538,121,358,537,213,500,471,329,512,721,683,818,651,373,603,737,589,859,550,862,729,858,382,262,548,838,130,226,617,377,687,608,454,846,598,63,268,501,310,583,809,223,315,448,604,124,701,81,415,725,259,279,250,214,440,388,187,806,567,459,161,332,755,622,152,553,125,860,188,652,722,694,387,442,562,331,654,584,842,712,22,829,918,58,616,260,582,658,556,265,595,723,854,547,817,592,645,657,157,840,166,864,863,49,646,7,526,304,586,857,280,243,151,269,274,742,8,233,517,301,688,171,376,80,716,868,865,690,238,52,160,485,341,682,531,127,871,665,451,833,100,644,866,27,615,754,747,439,520,446,189,229,346,193,819,64,612,826,724,822,869,197,294,351,232,691,991,823,845,337,557,476,447,591,655,196,753,680,832,587,648,1039,502,895,804,266,717,835,861,515,410,119,711,849,828,295,411,559,13,814,856,375,316,519,407,94,79,443,484,730,122,938,733,263,475,231,692,123,195,839,85,244,664,936,847,736,99,296,831,735,554,551,718,656,481,490,739,278,339,706,867,590,801,661,852,675,851,371,760,335,267,379,468,697,555,333,298,834,523,299,518,529,700,422,731,495,88,684,413,877,227,230,302,634,159,764,676,338,16,47,343,601,352,681,133,530,191,813,205,640,51,850,199,720,396,825,848,794,194,878,163,479,662,703,386,421,457,759,698,155,158,565,788,726,496,827,659,477,799,748,208,942,670,727,695,487,876,271,372,602,350,639,884,728,566,55,385,798,50,962,408,516,699,91,313,903,874,19,673,483,307,87,631,210,960,627,192,961,967,734,303,841,134,924,830,752,901,937,902,11,349,709,494,83,216,791,540,628,241,493,926,374,774,458,86,235,780,618,887,663,206,1015,552,97,264,98,821,625,619,920,277,796,853,810,812,820,763,1038,14,811,15,170,880,72,906,674,883,482,929,638,480,626,792,802,252,779,61,300,905,797,768,762,896,710,904,25,169,336,535,211,1010,120,288,242,228,795,777,667,990,444,807,62,911,745,893,913,897,432,879,925,784,800,875,282,570,522,679,597,156,200,391,246,594,637,933,881,912,916,914,966,803,668,870,773,621,782,900,815,891,746,770,885,921,524,528,950,678,948,702,607,48,660,390,355,986,378,462,26,30,696,198,606,934,930,959,624,452,765,308,342,504,790,354,534,201,165,708,705,750,666,128,894,732,892,772,781,836,588,872,785,808,596,882,714,756,786,758,873,174,704,956,932,237,599,671,489,318,84,203,600,928,643,103,102,931,954,922,270,492,486,247,12,66,162,67,558,571,707,669,90,525,93,175,272,715,751,560,561,283,426,273,743,319,958,1008,927,1056,984,953,168,642,36,340,907,910,775,898,888,757,889,805,915,923,144,909,917,164,740,576,771,108,767,769,789,886,778,202,899,783,890,776,787,314,324,766,935,180,207,908,620,360,944,793,1014,761,816,623,1017,1011,1018,1009,1012,1006,101,95,1007,92,96,1016,1013,461,1019,1047,29,1048,24,31,1046,1049,1045,1042,1043,1044,23,21,1004,1054,1057,1058,1059,1055,1053,20,1052,18,1050,1051,1041,1040,1020,1026,1028,65,1029,1027,1025,59,1024,1021,1022,1023,60,1030,1037,677,1034,1035,1036,1033,1032,57,1031,56,672,54,1005,741,1003,569,306,281,347,276,309,311,312,564,344,563,317,275,749,744,239,236,234,947,946,240,939,945,940,941,245,345,348,951,427,497,425,353,498,491,488,450,453,463,456,455,499,420,419,533,383,381,380,384,389,417,1060,416,414,527,949,952,1002,994,993,139,980,138,992,989,988,987,982,983,985,137,995,996,998,1000,713,1001,999,126,641,129,132,131,997,981,636,955,965,964,632,635,968,963,630,204,738,957,605,209,969,970,971,167,633,978,979,977,976,972,975,973,974,173,1061]
    correlationalEdge = []
    correlationalPyramid = []
    correlationalColor = []
    correlationalFuzzy = []

    for i in range(len(correlational)):
        if correlational[i] <= 755:
            if len(correlationalPyramid) < 10:
                correlationalPyramid.append(correlational[i])

        elif correlational[i] > 755 and correlational[i] <= 789:
            if len(correlationalColor) < 10:
                correlationalColor.append(correlational[i])

        elif correlational[i] > 789 and correlational[i] <= 869:
            if len(correlationalEdge) < 10:
                correlationalEdge.append(correlational[i])

        elif correlational[i] > 869 and correlational[i] <= 1061:
            if len(correlationalFuzzy) < 10:
                correlationalFuzzy.append(correlational[i])


    information = [1,37,109,2,38,110,3,143,35,111,398,362,113,361,5,39,397,363,74,73,145,542,399,146,71,325,142,10,149,506,107,541,182,179,181,140,505,32,431,435,82,33,217,147,326,579,434,141,433,469,395,112,401,545,253,577,41,254,34,543,539,46,507,578,647,467,470,509,75,4,613,365,136,9,611,289,366,400,6,255,581,406,218,42,817,466,327,429,77,503,68,575,359,69,430,291,114,689,686,45,215,649,183,219,290,402,153,148,437,176,441,40,364,465,471,614,172,544,322,257,622,178,610,369,154,392,513,287,580,286,855,546,394,70,28,464,118,510,428,585,473,609,117,549,177,221,550,818,719,226,328,508,436,536,293,329,919,824,859,852,220,650,393,765,248,320,256,321,833,190,404,356,843,685,284,261,222,76,184,403,405,651,862,285,357,568,370,424,262,330,418,653,104,292,251,774,943,249,423,538,323,460,502,186,106,438,574,150,472,789,604,572,593,367,537,809,694,827,617,500,225,449,78,258,297,918,17,478,514,853,683,532,358,654,894,105,442,89,629,316,212,43,185,511,224,608,782,842,772,764,501,582,115,409,779,864,837,775,586,260,474,687,846,573,693,116,712,854,412,44,721,722,865,844,334,135,280,100,305,658,53,368,213,121,548,440,445,753,81,830,869,603,512,373,250,125,725,755,214,863,783,598,763,840,454,791,382,589,829,858,781,265,188,187,301,161,895,296,223,521,63,615,822,130,690,332,268,723,652,310,729,737,124,646,871,64,680,828,716,388,259,315,387,562,845,682,415,616,553,448,878,279,152,621,459,583,868,847,547,567,22,724,595,819,331,298,860,294,341,584,243,166,197,838,556,157,804,806,295,645,58,688,834,823,849,757,803,655,49,7,644,717,839,770,701,727,592,762,942,171,274,676,760,8,726,238,151,304,872,814,769,768,856,877,773,681,752,229,232,798,742,879,377,526,792,665,244,52,80,794,850,207,517,160,193,376,439,825,857,396,127,27,346,540,761,718,747,832,233,496,835,758,337,351,531,612,801,451,866,826,813,520,446,196,675,648,759,523,269,812,748,271,831,706,767,692,691,411,657,485,711,202,189,559,991,375,352,484,591,447,587,266,780,754,887,515,881,896,1039,410,119,13,808,777,519,407,476,475,720,555,664,339,195,122,938,79,670,913,267,733,656,340,697,468,490,288,867,263,443,481,94,602,208,785,231,554,739,735,700,335,551,728,851,902,557,123,299,736,85,936,861,227,379,278,684,458,848,640,99,529,88,730,661,590,371,731,51,338,230,422,159,634,734,518,784,601,343,16,205,47,836,302,191,876,884,72,530,199,133,495,477,194,796,799,333,277,421,703,386,746,163,155,698,158,565,903,841,663,659,479,662,303,788,216,695,699,372,91,487,786,457,307,252,639,385,87,350,50,55,19,516,628,962,408,374,482,566,924,619,483,313,235,906,926,937,83,673,134,883,967,11,631,349,961,494,627,960,210,192,709,901,920,625,15,241,493,86,206,552,1015,264,14,97,98,626,170,61,929,480,300,228,638,120,336,354,62,211,904,1010,169,25,535,522,637,282,570,594,597,391,200,156,679,933,246,977,162,978,976,164,1050,18,981,979,974,975,20,980,21,12,1023,165,956,1055,957,1054,1053,1052,1056,198,958,1057,1059,204,203,1058,201,1051,959,973,175,173,971,972,168,167,174,970,963,969,964,965,966,180,982,968,26,983,1035,1012,101,1032,1031,1030,96,56,95,54,102,103,1011,1034,1005,1007,1006,108,48,1033,1009,1008,93,92,90,1027,1021,65,1022,66,1019,1025,1026,67,1020,1018,1013,1029,57,84,59,60,1017,1028,1016,1014,1004,1003,984,1002,132,24,992,1024,131,993,1047,129,1048,23,1049,137,986,985,987,144,988,138,139,990,989,128,29,30,1038,1040,998,1037,999,1042,1036,1001,1000,1041,36,31,126,994,995,1046,996,997,1043,1044,1045,955,606,209,461,453,732,455,452,450,444,741,740,738,456,462,744,463,486,488,489,707,708,710,715,714,713,743,745,492,416,776,771,413,778,787,790,797,795,793,414,417,432,766,751,750,749,427,426,425,419,420,756,491,705,390,633,571,636,576,569,641,564,561,642,563,635,632,558,630,599,600,607,618,596,620,588,624,623,560,643,497,674,678,677,524,696,504,702,498,499,704,525,527,660,528,668,667,666,669,671,672,1060,533,534,800,389,954,272,917,916,915,921,922,923,928,927,925,270,273,931,914,910,909,908,911,283,281,275,276,912,930,932,905,941,947,946,945,948,949,950,953,952,951,944,940,247,939,242,934,245,240,239,935,234,236,237,907,900,802,820,353,355,360,348,347,345,870,342,344,821,816,874,815,805,383,384,381,380,378,811,810,807,873,875,899,314,309,892,311,308,306,893,898,897,605,312,891,880,890,324,885,882,886,888,889,317,318,319,1061]
    informationEdge = []
    informationPyramid = []
    informationColor = []
    informationFuzzy = []

    for i in range(len(information)):
        if information[i] <= 755:
            if len(informationPyramid) < 10:
                informationPyramid.append(information[i])

        elif information[i] > 755 and information[i] <= 789:
            if len(informationColor) < 10:
                informationColor.append(information[i])

        elif information[i] > 789 and information[i] <= 869:
            if len(informationEdge) < 10:
                informationEdge.append(information[i])

        elif information[i] > 869 and information[i] <= 1061:
            if len(informationFuzzy) < 10:
                informationFuzzy.append(information[i])

    chi = [1,37,38,109,2,110,3,111,35,362,143,398,113,39,361,73,397,363,74,5,542,145,399,71,506,146,325,10,182,541,107,142,149,179,181,147,435,505,431,217,434,433,82,140,579,326,32,141,253,469,395,33,41,577,543,401,578,507,254,470,545,112,539,647,46,9,467,365,75,509,218,611,613,255,581,34,289,575,77,327,136,817,503,45,366,359,686,291,215,219,441,114,153,437,4,400,6,68,183,614,402,429,42,369,406,430,69,290,466,649,257,689,471,585,513,117,176,465,287,549,392,154,221,622,172,364,610,178,28,580,650,855,293,148,322,546,609,118,177,40,719,464,818,544,919,286,510,473,824,436,70,550,428,685,405,261,393,394,859,320,226,321,190,256,329,536,852,251,508,248,651,323,370,833,862,284,593,356,765,653,328,424,843,292,225,449,568,222,418,104,774,17,220,438,150,943,357,423,460,330,478,262,694,285,297,404,604,574,514,249,537,629,186,258,403,184,76,683,789,538,532,827,809,78,500,572,212,918,617,105,837,89,367,185,106,502,853,842,693,472,687,316,844,573,53,764,358,582,305,782,334,608,721,772,894,779,864,501,81,125,474,722,654,854,442,280,213,658,865,712,846,725,409,115,775,763,586,43,135,161,224,511,116,869,858,753,755,521,863,100,368,840,737,829,260,830,512,603,388,791,440,729,445,895,214,615,412,44,250,454,723,130,598,121,548,871,783,781,822,382,589,223,373,690,64,828,716,259,845,806,341,838,680,310,878,757,562,387,279,459,583,652,197,315,265,868,188,187,621,301,701,296,63,567,860,584,448,553,847,547,724,332,268,823,294,769,804,646,124,760,849,166,377,243,665,682,616,415,819,298,644,717,274,331,856,152,676,839,834,295,688,58,645,872,22,814,773,857,396,727,762,171,595,803,942,681,233,726,877,592,540,768,752,556,157,655,526,244,439,151,304,238,7,49,825,866,269,798,742,801,612,517,770,648,850,794,657,832,80,767,207,792,485,835,8,761,759,531,376,826,496,718,747,232,229,879,346,813,451,52,189,812,831,754,758,675,160,193,896,706,520,523,27,127,711,720,748,808,881,692,691,351,337,780,202,991,559,375,887,446,196,288,476,468,515,271,867,411,475,851,557,777,519,208,447,484,352,591,266,587,79,861,785,656,684,670,119,1039,410,13,490,94,913,733,267,848,407,231,340,728,730,481,263,443,339,938,195,122,664,555,902,99,299,736,936,123,85,697,640,602,735,700,739,551,554,335,590,371,661,477,72,278,379,227,836,458,333,784,518,799,796,529,88,884,495,191,302,876,159,731,230,634,51,338,422,734,194,343,601,205,16,47,216,903,163,841,530,133,199,303,788,252,663,659,479,662,277,786,421,386,703,307,746,457,639,155,698,158,565,699,695,372,91,487,482,374,566,313,619,235,483,924,926,906,350,385,50,55,87,883,673,937,134,83,920,901,962,408,516,19,628,625,960,192,967,349,961,210,627,709,494,631,11,86,206,493,15,241,626,170,14,1015,98,552,264,97,638,61,480,929,300,228,211,1010,169,62,25,354,535,336,120,904,637,522,200,246,679,156,597,570,594,391,933,282,209,1059,30,173,174,975,976,29,1052,167,31,168,978,1044,36,1043,979,162,1045,1046,977,1058,165,1047,164,175,1056,974,963,1050,964,1055,965,203,201,18,1053,1051,198,12,1054,966,20,1048,1057,24,973,972,26,23,971,21,968,1049,970,204,180,969,102,1042,1021,1022,1024,1020,1019,1018,1017,1016,1023,999,90,67,126,1025,997,1028,1027,998,1026,84,92,1041,108,1009,1007,1014,1011,1012,1013,103,1008,1006,93,1001,1000,1005,1002,1003,1004,95,96,66,65,1029,987,986,984,988,989,144,990,1034,985,983,1030,1038,1040,982,1037,1036,1035,101,981,48,992,993,60,59,139,132,131,996,129,128,1031,57,56,994,138,137,1033,54,995,1032,980,618,959,455,741,740,461,456,743,713,453,744,450,452,462,463,738,732,498,499,715,497,492,491,486,488,489,745,444,749,419,414,787,416,413,790,793,800,797,795,417,420,750,425,766,756,751,771,432,776,426,427,778,714,504,805,643,641,636,635,642,576,710,660,564,569,571,588,633,632,630,624,623,620,607,606,605,596,599,600,563,561,560,696,525,527,528,524,702,704,708,707,705,1060,533,558,534,668,667,666,669,671,672,678,677,674,802,807,958,927,923,270,272,925,928,909,930,934,932,931,273,922,275,276,914,912,911,915,916,917,921,281,283,935,939,247,947,951,950,949,952,953,954,957,956,955,948,946,245,945,242,941,940,240,239,944,234,236,237,910,908,810,880,875,874,873,360,355,907,353,345,347,348,870,378,380,381,390,815,811,389,816,820,821,383,384,344,342,882,317,312,314,899,311,900,309,905,306,308,898,318,885,319,889,888,886,890,891,324,897,893,892,1061]
    chiEdge = []
    chiPyramid = []
    chiColor = []
    chiFuzzy = []

    for i in range(len(chi)):
        if chi[i] <= 755:
            if len(chiPyramid) < 10:
                chiPyramid.append(chi[i])

        elif chi[i] > 755 and chi[i] <= 789:
            if len(chiColor) < 10:
                chiColor.append(chi[i])

        elif chi[i] > 789 and chi[i] <= 869:
            if len(chiEdge) < 10:
                chiEdge.append(chi[i])

        elif chi[i] > 869 and chi[i] <= 1061:
            if len(chiFuzzy) < 10:
                chiFuzzy.append(chi[i])


    ranked = {}
    infoArray = [informationEdge, informationPyramid, informationColor, informationFuzzy]
    corrArray = [correlationalEdge, correlationalPyramid, correlationalColor, correlationalFuzzy]
    chiArray = [chiEdge, chiPyramid, chiColor, chiFuzzy]

    # Change the range to use this script based on 1 < than the total number of attributes (because the class attribute doesn't count)
    for j in range(4):
        for i in range(1062):
            if i in corrArray[j]:
                if i in infoArray[j]:
                    if i in chiArray[j]:
                        # Check for similarities between the feature selection methods
                        # This returns the top 40 attributes, the top 1s from each filter, then 2s, and so on
                        corrStrength = corrArray[j].index(i)
                        infoStrength = infoArray[j].index(i)
                        chiStrength = chiArray[j].index(i)
                        avgIndex = (corrStrength + infoStrength + chiStrength) / 3
                        ranked[i] = avgIndex

    # This outputs the selected features in both lists in rank order, in this context it's [35, 27, 34, 5, 39, 1, 30, 3, 25, 47]
    print(f"{sorted(ranked, key=ranked.get)}")

if __name__ == '__main__':
    main()